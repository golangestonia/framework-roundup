// Code generated by goa v3.7.13, DO NOT EDIT.
//
// pets endpoints
//
// Command:
// $ goa gen github.com/golangestonia/framework-roundup/goa/design

package pets

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "pets" service endpoints.
type Endpoints struct {
	AllPets   goa.Endpoint
	PetByID   goa.Endpoint
	CreatePet goa.Endpoint
}

// NewEndpoints wraps the methods of the "pets" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		AllPets:   NewAllPetsEndpoint(s),
		PetByID:   NewPetByIDEndpoint(s),
		CreatePet: NewCreatePetEndpoint(s),
	}
}

// Use applies the given middleware to all the "pets" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.AllPets = m(e.AllPets)
	e.PetByID = m(e.PetByID)
	e.CreatePet = m(e.CreatePet)
}

// NewAllPetsEndpoint returns an endpoint function that calls the method
// "AllPets" of service "pets".
func NewAllPetsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.AllPets(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedPetCollection(res, "default")
		return vres, nil
	}
}

// NewPetByIDEndpoint returns an endpoint function that calls the method
// "PetByID" of service "pets".
func NewPetByIDEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PetByIDPayload)
		res, err := s.PetByID(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedPet(res, "default")
		return vres, nil
	}
}

// NewCreatePetEndpoint returns an endpoint function that calls the method
// "CreatePet" of service "pets".
func NewCreatePetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Pet)
		return s.CreatePet(ctx, p)
	}
}
