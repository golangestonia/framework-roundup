// Code generated by goa v3.7.13, DO NOT EDIT.
//
// pets views
//
// Command:
// $ goa gen github.com/golangestonia/framework-roundup/goa/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// PetCollection is the viewed result type that is projected based on a view.
type PetCollection struct {
	// Type to project
	Projected PetCollectionView
	// View to render
	View string
}

// Pet is the viewed result type that is projected based on a view.
type Pet struct {
	// Type to project
	Projected *PetView
	// View to render
	View string
}

// PetCollectionView is a type that runs validations on a projected type.
type PetCollectionView []*PetView

// PetView is a type that runs validations on a projected type.
type PetView struct {
	ID       *int64
	Name     *string
	Category *struct {
		ID   *int64
		Name *string
	}
	Status *string
}

var (
	// PetCollectionMap is a map indexing the attribute names of PetCollection by
	// view name.
	PetCollectionMap = map[string][]string{
		"default": {
			"id",
			"name",
			"category",
			"status",
		},
	}
	// PetMap is a map indexing the attribute names of Pet by view name.
	PetMap = map[string][]string{
		"default": {
			"id",
			"name",
			"category",
			"status",
		},
	}
)

// ValidatePetCollection runs the validations defined on the viewed result type
// PetCollection.
func ValidatePetCollection(result PetCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidatePetCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidatePet runs the validations defined on the viewed result type Pet.
func ValidatePet(result *Pet) (err error) {
	switch result.View {
	case "default", "":
		err = ValidatePetView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidatePetCollectionView runs the validations defined on PetCollectionView
// using the "default" view.
func ValidatePetCollectionView(result PetCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidatePetView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePetView runs the validations defined on PetView using the "default"
// view.
func ValidatePetView(result *PetView) (err error) {

	return
}
