// Code generated by goa v3.7.13, DO NOT EDIT.
//
// pets HTTP server types
//
// Command:
// $ goa gen github.com/golangestonia/framework-roundup/goa/design

package server

import (
	pets "github.com/golangestonia/framework-roundup/goa/gen/pets"
	petsviews "github.com/golangestonia/framework-roundup/goa/gen/pets/views"
)

// CreatePetRequestBody is the type of the "pets" service "CreatePet" endpoint
// HTTP request body.
type CreatePetRequestBody struct {
	ID       *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Category *struct {
		ID   *int64  `form:"id" json:"id" xml:"id"`
		Name *string `form:"name" json:"name" xml:"name"`
	} `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// PetResponseCollection is the type of the "pets" service "AllPets" endpoint
// HTTP response body.
type PetResponseCollection []*PetResponse

// PetByIDNotFoundResponseBody is the type of the "pets" service "PetByID"
// endpoint HTTP response body.
type PetByIDNotFoundResponseBody struct {
	ID       *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Category *struct {
		ID   *int64  `form:"id" json:"id" xml:"id"`
		Name *string `form:"name" json:"name" xml:"name"`
	} `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// PetResponse is used to define fields on response body types.
type PetResponse struct {
	ID       *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Category *struct {
		ID   *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	} `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// NewPetResponseCollection builds the HTTP response body from the result of
// the "AllPets" endpoint of the "pets" service.
func NewPetResponseCollection(res petsviews.PetCollectionView) PetResponseCollection {
	body := make([]*PetResponse, len(res))
	for i, val := range res {
		body[i] = marshalPetsviewsPetViewToPetResponse(val)
	}
	return body
}

// NewPetByIDNotFoundResponseBody builds the HTTP response body from the result
// of the "PetByID" endpoint of the "pets" service.
func NewPetByIDNotFoundResponseBody(res *petsviews.PetView) *PetByIDNotFoundResponseBody {
	body := &PetByIDNotFoundResponseBody{
		ID:     res.ID,
		Name:   res.Name,
		Status: res.Status,
	}
	if res.Category != nil {
		body.Category = &struct {
			ID   *int64  `form:"id" json:"id" xml:"id"`
			Name *string `form:"name" json:"name" xml:"name"`
		}{
			ID:   res.Category.ID,
			Name: res.Category.Name,
		}
	}
	return body
}

// NewPetByIDPayload builds a pets service PetByID endpoint payload.
func NewPetByIDPayload(id int) *pets.PetByIDPayload {
	v := &pets.PetByIDPayload{}
	v.ID = id

	return v
}

// NewCreatePetPet builds a pets service CreatePet endpoint payload.
func NewCreatePetPet(body *CreatePetRequestBody) *pets.Pet {
	v := &pets.Pet{
		ID:     body.ID,
		Name:   body.Name,
		Status: body.Status,
	}
	if body.Category != nil {
		v.Category = &struct {
			ID   *int64
			Name *string
		}{
			ID:   body.Category.ID,
			Name: body.Category.Name,
		}
	}

	return v
}
