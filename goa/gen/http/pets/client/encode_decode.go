// Code generated by goa v3.7.13, DO NOT EDIT.
//
// pets HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/golangestonia/framework-roundup/goa/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	pets "github.com/golangestonia/framework-roundup/goa/gen/pets"
	petsviews "github.com/golangestonia/framework-roundup/goa/gen/pets/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildAllPetsRequest instantiates a HTTP request object with method and path
// set to call the "pets" service "AllPets" endpoint
func (c *Client) BuildAllPetsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AllPetsPetsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("pets", "AllPets", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAllPetsResponse returns a decoder for responses returned by the pets
// AllPets endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeAllPetsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusInternalServerError:
			var (
				body AllPetsInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("pets", "AllPets", err)
			}
			p := NewAllPetsPetCollectionInternalServerError(body)
			view := "default"
			vres := petsviews.PetCollection{Projected: p, View: view}
			if err = petsviews.ValidatePetCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("pets", "AllPets", err)
			}
			res := pets.NewPetCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("pets", "AllPets", resp.StatusCode, string(body))
		}
	}
}

// BuildPetByIDRequest instantiates a HTTP request object with method and path
// set to call the "pets" service "PetByID" endpoint
func (c *Client) BuildPetByIDRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*pets.PetByIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("pets", "PetByID", "*pets.PetByIDPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PetByIDPetsPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("pets", "PetByID", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodePetByIDResponse returns a decoder for responses returned by the pets
// PetByID endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodePetByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNotFound:
			var (
				body PetByIDNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("pets", "PetByID", err)
			}
			p := NewPetByIDPetNotFound(&body)
			view := "default"
			vres := &petsviews.Pet{Projected: p, View: view}
			if err = petsviews.ValidatePet(vres); err != nil {
				return nil, goahttp.ErrValidationError("pets", "PetByID", err)
			}
			res := pets.NewPet(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("pets", "PetByID", resp.StatusCode, string(body))
		}
	}
}

// BuildCreatePetRequest instantiates a HTTP request object with method and
// path set to call the "pets" service "CreatePet" endpoint
func (c *Client) BuildCreatePetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreatePetPetsPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("pets", "CreatePet", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreatePetRequest returns an encoder for requests sent to the pets
// CreatePet server.
func EncodeCreatePetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*pets.Pet)
		if !ok {
			return goahttp.ErrInvalidType("pets", "CreatePet", "*pets.Pet", v)
		}
		body := NewCreatePetRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("pets", "CreatePet", err)
		}
		return nil
	}
}

// DecodeCreatePetResponse returns a decoder for responses returned by the pets
// CreatePet endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeCreatePetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNotFound:
			var (
				body int
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("pets", "CreatePet", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("pets", "CreatePet", resp.StatusCode, string(body))
		}
	}
}

// unmarshalPetResponseToPetsviewsPetView builds a value of type
// *petsviews.PetView from a value of type *PetResponse.
func unmarshalPetResponseToPetsviewsPetView(v *PetResponse) *petsviews.PetView {
	res := &petsviews.PetView{
		ID:     v.ID,
		Name:   v.Name,
		Status: v.Status,
	}
	if v.Category != nil {
		res.Category = &struct {
			ID   *int64
			Name *string
		}{
			ID:   v.Category.ID,
			Name: v.Category.Name,
		}
	}

	return res
}
