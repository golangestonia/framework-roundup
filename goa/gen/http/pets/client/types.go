// Code generated by goa v3.7.13, DO NOT EDIT.
//
// pets HTTP client types
//
// Command:
// $ goa gen github.com/golangestonia/framework-roundup/goa/design

package client

import (
	pets "github.com/golangestonia/framework-roundup/goa/gen/pets"
	petsviews "github.com/golangestonia/framework-roundup/goa/gen/pets/views"
)

// CreatePetRequestBody is the type of the "pets" service "CreatePet" endpoint
// HTTP request body.
type CreatePetRequestBody struct {
	ID       *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Category *struct {
		ID   *int64  `form:"id" json:"id" xml:"id"`
		Name *string `form:"name" json:"name" xml:"name"`
	} `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// AllPetsInternalServerErrorResponseBody is the type of the "pets" service
// "AllPets" endpoint HTTP response body.
type AllPetsInternalServerErrorResponseBody []*PetResponse

// PetByIDNotFoundResponseBody is the type of the "pets" service "PetByID"
// endpoint HTTP response body.
type PetByIDNotFoundResponseBody struct {
	ID       *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Category *struct {
		ID   *int64  `form:"id" json:"id" xml:"id"`
		Name *string `form:"name" json:"name" xml:"name"`
	} `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// PetResponse is used to define fields on response body types.
type PetResponse struct {
	ID       *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Category *struct {
		ID   *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	} `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// AllPetsOKResponseBody is used to define fields on response body types.
type AllPetsOKResponseBody []*PetResponse

// PetByIDInternalServerErrorResponseBody is used to define fields on response
// body types.
type PetByIDInternalServerErrorResponseBody struct {
	ID       *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Category *struct {
		ID   *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	} `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// PetByIDOKResponseBody is used to define fields on response body types.
type PetByIDOKResponseBody struct {
	ID       *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Category *struct {
		ID   *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
		Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	} `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// NewCreatePetRequestBody builds the HTTP request body from the payload of the
// "CreatePet" endpoint of the "pets" service.
func NewCreatePetRequestBody(p *pets.Pet) *CreatePetRequestBody {
	body := &CreatePetRequestBody{
		ID:     p.ID,
		Name:   p.Name,
		Status: p.Status,
	}
	if p.Category != nil {
		body.Category = &struct {
			ID   *int64  `form:"id" json:"id" xml:"id"`
			Name *string `form:"name" json:"name" xml:"name"`
		}{
			ID:   p.Category.ID,
			Name: p.Category.Name,
		}
	}
	return body
}

// NewAllPetsPetCollectionInternalServerError builds a "pets" service "AllPets"
// endpoint result from a HTTP "InternalServerError" response.
func NewAllPetsPetCollectionInternalServerError(body AllPetsInternalServerErrorResponseBody) petsviews.PetCollectionView {
	v := make([]*petsviews.PetView, len(body))
	for i, val := range body {
		v[i] = unmarshalPetResponseToPetsviewsPetView(val)
	}

	return v
}

// NewPetByIDPetNotFound builds a "pets" service "PetByID" endpoint result from
// a HTTP "NotFound" response.
func NewPetByIDPetNotFound(body *PetByIDNotFoundResponseBody) *petsviews.PetView {
	v := &petsviews.PetView{
		ID:     body.ID,
		Name:   body.Name,
		Status: body.Status,
	}
	if body.Category != nil {
		v.Category = &struct {
			ID   *int64
			Name *string
		}{
			ID:   body.Category.ID,
			Name: body.Category.Name,
		}
	}

	return v
}
