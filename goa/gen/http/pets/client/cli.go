// Code generated by goa v3.7.13, DO NOT EDIT.
//
// pets HTTP client CLI support package
//
// Command:
// $ goa gen github.com/golangestonia/framework-roundup/goa/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	pets "github.com/golangestonia/framework-roundup/goa/gen/pets"
)

// BuildPetByIDPayload builds the payload for the pets PetByID endpoint from
// CLI flags.
func BuildPetByIDPayload(petsPetByIDID string) (*pets.PetByIDPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(petsPetByIDID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &pets.PetByIDPayload{}
	v.ID = id

	return v, nil
}

// BuildCreatePetPayload builds the payload for the pets CreatePet endpoint
// from CLI flags.
func BuildCreatePetPayload(petsCreatePetBody string) (*pets.Pet, error) {
	var err error
	var body CreatePetRequestBody
	{
		err = json.Unmarshal([]byte(petsCreatePetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"category\": {\n         \"id\": 4299514113566346013,\n         \"name\": \"Et culpa amet.\"\n      },\n      \"id\": 605586248665611493,\n      \"name\": \"Aperiam consequatur alias.\",\n      \"status\": \"Velit sed aliquam reprehenderit eum quas et.\"\n   }'")
		}
	}
	v := &pets.Pet{
		ID:     body.ID,
		Name:   body.Name,
		Status: body.Status,
	}
	if body.Category != nil {
		v.Category = &struct {
			ID   *int64
			Name *string
		}{
			ID:   body.Category.ID,
			Name: body.Category.Name,
		}
	}

	return v, nil
}
