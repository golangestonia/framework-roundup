// Code generated by goa v3.7.13, DO NOT EDIT.
//
// pets HTTP client CLI support package
//
// Command:
// $ goa gen github.com/golangestonia/framework-roundup/goa/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	petsc "github.com/golangestonia/framework-roundup/goa/gen/http/pets/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `pets (all-pets|pet-by-id|create-pet)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` pets all-pets` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		petsFlags = flag.NewFlagSet("pets", flag.ContinueOnError)

		petsAllPetsFlags = flag.NewFlagSet("all-pets", flag.ExitOnError)

		petsPetByIDFlags  = flag.NewFlagSet("pet-by-id", flag.ExitOnError)
		petsPetByIDIDFlag = petsPetByIDFlags.String("id", "REQUIRED", "")

		petsCreatePetFlags    = flag.NewFlagSet("create-pet", flag.ExitOnError)
		petsCreatePetBodyFlag = petsCreatePetFlags.String("body", "REQUIRED", "")
	)
	petsFlags.Usage = petsUsage
	petsAllPetsFlags.Usage = petsAllPetsUsage
	petsPetByIDFlags.Usage = petsPetByIDUsage
	petsCreatePetFlags.Usage = petsCreatePetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "pets":
			svcf = petsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "pets":
			switch epn {
			case "all-pets":
				epf = petsAllPetsFlags

			case "pet-by-id":
				epf = petsPetByIDFlags

			case "create-pet":
				epf = petsCreatePetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "pets":
			c := petsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "all-pets":
				endpoint = c.AllPets()
				data = nil
			case "pet-by-id":
				endpoint = c.PetByID()
				data, err = petsc.BuildPetByIDPayload(*petsPetByIDIDFlag)
			case "create-pet":
				endpoint = c.CreatePet()
				data, err = petsc.BuildCreatePetPayload(*petsCreatePetBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// petsUsage displays the usage of the pets command and its subcommands.
func petsUsage() {
	fmt.Fprintf(os.Stderr, `The pet management service
Usage:
    %[1]s [globalflags] pets COMMAND [flags]

COMMAND:
    all-pets: AllPets implements AllPets.
    pet-by-id: PetByID implements PetByID.
    create-pet: CreatePet implements CreatePet.

Additional help:
    %[1]s pets COMMAND --help
`, os.Args[0])
}
func petsAllPetsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] pets all-pets

AllPets implements AllPets.

Example:
    %[1]s pets all-pets
`, os.Args[0])
}

func petsPetByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] pets pet-by-id -id INT

PetByID implements PetByID.
    -id INT: 

Example:
    %[1]s pets pet-by-id --id 2405097233176137560
`, os.Args[0])
}

func petsCreatePetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] pets create-pet -body JSON

CreatePet implements CreatePet.
    -body JSON: 

Example:
    %[1]s pets create-pet --body '{
      "category": {
         "id": 4299514113566346013,
         "name": "Et culpa amet."
      },
      "id": 605586248665611493,
      "name": "Aperiam consequatur alias.",
      "status": "Velit sed aliquam reprehenderit eum quas et."
   }'
`, os.Args[0])
}
